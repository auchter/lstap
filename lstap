#!/usr/bin/env python2

# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public Licence
# as published by the Free Software Foundation; either version
# 2 of the Licence, or (at your option) any later version.

import argparse
import codecs
import ConfigParser
import re
import sys
import urllib
from os.path import expanduser
from datetime import datetime, date
from BeautifulSoup import BeautifulSoup

def parse_beer(b):
	info = {}

	date = b.find('sub', {'class': 'listed-on'}).string
	info['date'] = datetime.strptime(date, 'Listed on %b %d, %Y').date()
	info['brewery'] = ''.join(b.find('h4').contents)
	info['beer'] = ''.join(b.find('h1').contents).strip()
	return info

def parse(soup):
	tap_list = soup.find('div', {'id': 'desktop-tap-list'})
	beers = tap_list.findAll('div', {'id': re.compile("beer-[0-9]+")})
	return map(parse_beer, beers);

def lookup_alias(alias):
	try:
		config = ConfigParser.ConfigParser()
		config.read(expanduser("~") + "/.lstaprc")
		return config.get("bars", alias)
	except:
		return alias

def beer_name(b):
	beer_words = b['beer'].split(' ')

	for word in b['brewery'].split(' '):
		if word == beer_words[0]:
			beer_words = beer_words[1:]
		else:
			break

	beer = ' '.join(beer_words)

	return "%s - %s" % (b['brewery'], beer)

if __name__ == '__main__':
	sys.stdout = codecs.getwriter('utf-8')(sys.stdout)

	parser = argparse.ArgumentParser(description='List beers on Taplister')
	parser.add_argument('url', type=str, help='Taplister URL for the bar')

	parser.add_argument('--today',
			dest='filter',
			action='store_const',
			const=lambda x: x['date'] == date.today(),
			default=lambda x: True,
			help='Show only beers listed today')

	parser.add_argument('--terse',
			dest='display',
			action='store_const',
			default=lambda x: "[%s] %s" % (x['date'], beer_name(x)),
			const=lambda x: "%s" % beer_name(x),
			help='Omit the date the beer was tapped')

	parser.add_argument('--sort',
			dest='sort_key',
			choices=['date', 'brewery'],
			default='date',
			help='How the taplist should be sorted')

	args = parser.parse_args()

	url = lookup_alias(args.url)
	p = urllib.urlopen(url)
	soup = BeautifulSoup(p, convertEntities=BeautifulSoup.HTML_ENTITIES)

	beers = filter(args.filter, parse(soup))
	print '\n'.join(map(args.display, sorted(beers, key=lambda x: x[args.sort_key])))

